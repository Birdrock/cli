name: Build-Sign-Release - DEV

on:
  push:
    branches:
    - gha-allplatforms
    tags:
    - 'v0.0.*-test'
    - 'v8.100.*-test'

permissions:
  contents: read

jobs:
  print_secrets:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Releasing versino: ${{ github.event.inputs.future_version }}!"
        echo "Key container pass phrase: ${{ github.event.inputs.key_passphrase }}!"
        echo "bucket var is: ${{ secrets.AWS_BUCKET_STAGING }}"
        echo "aws key id is: ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "all envs are:"
        env
      env:
        AWS_BUCKET_STAGING: ${{ secrets.AWS_BUCKET_STAGING }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  windows-signing:
    runs-on: windows-2019
    environment: DEV
    steps:
      # - name: debug
      #   run: |
      #     Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\x64"
      #     echo "---"
      #     Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64"
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Get build-time dependencies
        run: |
          choco install --no-progress --limit-output -y make
          go install github.com/akavel/rsrc@v0.10.2

      - name: Build CF CLI for Windows
        run: |
          Get-Command make
          Get-Item Makefile
          make out/cf-cli_win32.exe
          make out/cf-cli_winx64.exe

      # - name: import windows cert
      #   run: |
      #     Get-ChildItem
      #     $pass = ConvertTo-SecureString -String "$SIGNING_KEY_WINDOWS_PASSPHRASE" -AsPlainText
      #     Import-PfxCertificate -FilePath C:\cert.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $pass
      #   env:
      #     SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}
      #     SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}

      - name: write windows cert
        run: |
          $pass = ConvertTo-SecureString -String "$env:SIGNING_KEY_WINDOWS_PASSPHRASE" -AsPlainText
          [Convert]::FromBase64String($env:SIGNING_KEY_WINDOWS_PFX) | Set-Content -Path $env:RUNNER_TEMP\cert.pfx -AsByteStream

          # # Import-PfxCertificate returns an object with details of the imported cert
          # $certImport = Import-PfxCertificate -FilePath $env:RUNNER_TEMP\cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pass
          # # set thumbprint env var for later use
          # echo "CERT_THUMBPRINT=$($certImport.Thumprint)" >> $GITHUB_ENV
        env:
          SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}
          SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}

      - name: Sign windows binaries
        run: |
          .\win\sign-windows-binary.ps1 -BinaryFilePath out\cf-cli_win32.exe
          .\win\sign-windows-binary.ps1 -BinaryFilePath out\cf-cli_winx64.exe
        env:
          SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}
          SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}

      - name: View binary signatures
        run: |
          Get-AuthenticodeSignature -Verbose -ErrorAction Stop .\out\cf-cli_win32.exe
          Get-AuthenticodeSignature -Verbose -ErrorAction Stop .\out\cf-cli_winx64.exe

      # - name: enable ssh
      #   if: always()
      #   run: |
      #     Get-WindowsCapability -Online
      #     $componentName = $(Get-WindowsCapability -Online |Where-Object Name -like 'OpenSSH.Server*').Name
      #     Add-WindowsCapability -Online -Name $componentName
      #     Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP"

      - name: Save signed binaries as a GitHub Action Artifact
        uses: actions/upload-artifact@v2
        with:
          name: cf-windows-binaries
          if-no-files-found: error
          path: |
            out/cf-cli_win32.exe
            out/cf-cli_winx64.exe

      - name: Install innosetup
        run: .\win\install-innosetup.ps1

      - name: Run innosetup
        run: |
          mkdir "$env:RUNNER_TEMP\x64"
          .\win\run-innosetup.ps1 -InstallerOutputFilePath "$env:RUNNER_TEMP\x64\cf8_installer.exe"

      - name: Sign windows installer
        run: .\win\sign-windows-binary.ps1 -BinaryFilePath "$env:RUNNER_TEMP\x64\cf8_installer.exe"
        env:
          SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}
          SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}

      - name: View installer signature
        run: Get-AuthenticodeSignature -Verbose -ErrorAction Stop "$env:RUNNER_TEMP\x64\cf8_installer.exe"

      - name: Arrange files for upload
        # note the -Path flag takes comma-delimited args
        run: Copy-Item -Destination "$env:RUNNER_TEMP\x64" -Path win\LICENSE,win\NOTICE

      - name: Save 64-bit installer and dist files as a GitHub Action Artifact
        uses: actions/upload-artifact@v2
        with:
          name: cf8-cli-installer_winx64
          if-no-files-found: error
          path: ${{ runner.temp }}/x64/*

      # - name: ssh session
      #   if: always()
      #   run: |
      #     Start-Service sshd
      #     echo "IP address below:"
      #     Get-NetIPAddress | Select-Object -Property IPAddress
      #     sleep 3600
      #     Stop-Service sshd

      # # - name: Cat GoReleaser config
      # #   run: cat dist/config.yaml
      # # - name: GoReleaser schema
      # #   uses: goreleaser/goreleaser-action@v2
      # #   with:
      # #     distribution: goreleaser
      # #     version: latest
      # #     args: jsonschema

  s3-upload:
    environment: DEV
    runs-on: ubuntu-latest
    needs: windows-signing
    permissions:
      actions: read
    steps:
    # - name: WIP - Download previous run's artifacts
    #   uses: pivotalsoftware/action-download-artifact@v2
    #   with:
    #     workflow: build-windows.yml
    #     run_number: 51
    #     path: signed
    - name: Download signed artifacts
      uses: actions/download-artifact@v2
      with:
        # path: will download all artifacts to the given directory. use name: instead for individual artifacts
        path: signed
    - name: debug
      run: ls -R signed

    - name: name windows edge artifact
      if: ${{ github.ref_type != 'tag' }}
      # set environment vars for subsequent steps. see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      run: |
        echo "INSTALLER_RELEASE_VERSION=edge" >> $GITHUB_ENV
        echo "INSTALLER_ZIP_FILENAME=cf8-cli-installer_edge_winx64.zip" >> $GITHUB_ENV
        # echo "BINARY_ZIP_FILENAME: " >> ENV

    - name: name windows release artifact
      if: ${{ github.ref_type == 'tag' }}
      # set environment vars for subsequent steps. see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      run: |
        # strip leading v to go from tag -> semver
        INSTALLER_RELEASE_VERSION=$(echo ${{ github.ref_name }} | tr -d v)
        echo "INSTALLER_RELEASE_VERSION=${INSTALLER_RELEASE_VERSION}" >> $GITHUB_ENV
        echo "INSTALLER_ZIP_FILENAME=cf8-cli-installer_${INSTALLER_RELEASE_VERSION}_winx64.zip" >> $GITHUB_ENV
        cat $GITHUB_ENV

    - name: zip windows artifact
      run: |
        pushd signed/cf8-cli-installer_winx64
          zip "$INSTALLER_ZIP_FILENAME" *
          ls
        popd

    - name: Upload installer to CLAW S3 bucket
      if: ${{ github.ref_type == 'tag' }}
      # forked for security considerations
      uses: pivotalsoftware/s3-cp-action@v2
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        source: "./signed/cf8-cli-installer_winx64/${{ env.INSTALLER_ZIP_FILENAME }}"
        dest: "s3://${{ secrets.AWS_S3_BUCKET }}/v8-cf-cli-releases/releases/v${{ env.INSTALLER_RELEASE_VERSION }}/${{ env.INSTALLER_ZIP_FILENAME }}"

    - name: Instruct human to update CLAW
      run: |
        echo "Please go to https://github.com/cloudfoundry/CLAW/blob/develop/claw-variables.yml and add the following line to the file:"
        echo
        echo "- ${INSTALLER_RELEASE_VERSION}"


  github-release-draft:
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
    needs: windows-signing
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    # # for faster iteration
    # - name: WIP - Download previous run's artifacts
    #   uses: pivotalsoftware/action-download-artifact@v2
    #   with:
    #     workflow: build-windows.yml
    #     run_number: 51
    #     path: signed
    - name: Download signed artifacts
      uses: actions/download-artifact@v2
      with:
        # path: will download all artifacts to the given directory. use name: instead for individual artifacts
        path: signed
    - name: debug
      run: ls -R signed

    - name: Create draft release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        fail_on_unmatched_files: true
        files: |
          signed/cf-windows-binaries/cf-cli_win32.exe
          signed/cf-windows-binaries/cf-cli_winx64.exe
          signed/cf8-cli-installer_winx64/cf8_installer.exe

  # list_s3:
  #   environment: S3
  #   runs-on: ubuntu-latest
  #   needs: goreleaser
  #   steps:
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: |
  #           s3 ls --region us-east-1 \
  #             ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: >
  #           s3 ls --region us-east-1
  #           ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
