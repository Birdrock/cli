name: Build

on:
  push:
    branches:
    - master
    - main
    - "v?"
    - gh-actions

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:

  test-rpm-package:
    name: Test RPM Packages
    needs: build-linux
    runs-on: ubuntu-latest
    container:
      image: fedora
    steps:

    - name: Download Signed Linux Packages
      uses: actions/download-artifact@v2
      with:
        name: signed-linux-rpm-packages

    - name: Display structure of downloaded files
      run: ls -R

    - name: Test RPMs
      env:
        RELEASE_VERSION: ${{ inputs.version }}
      run: |
        echo "RELEASE_VERSION: $RELEASE_VERSION"
        RELEASE_VERSION=8.100.0

        rpm_location="*.rpm"

        rpm -q --qf '%{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n' -p $rpm_location
        rpm -i $rpm_location
        cf -v

  test-deb-package:
    name: Test Debian Packages
    needs: build-linux
    runs-on: ubuntu-latest
    container:
      image: ubuntu
    steps:

    - name: Download Signed Linux Packages
      uses: actions/download-artifact@v2
      with:
        name: store-linux-deb-packages

    - name: Display structure of downloaded files
      run: |
        ls -R
        for f in store-linux-deb-packages/*.deb; do
          dpkg --info "$f"
        done

  test-macos:
    name: Test macOS Packages
    needs: build-macos
    runs-on: macos-latest
    steps:

    - name: Download Signed macOS Packages
      uses: actions/download-artifact@v2
      with:
        name: macos-signed-packages

    - name: Inspect macOS packages
      run: |
        ls -R
        pkgutil --check-signature *

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    environment: PROD
    steps:

    - name: Checkout cli
      uses: actions/checkout@v2

    - name: Get Build Version
      id: get_build_version
      run: echo "::set-output name=build_version::$(cat BUILD_VERSION)"

    - name: Print Build Version
      run: echo "${{ steps.get_build_version.outputs.build_version }}"

    - name: Checkout cli-ci
      uses: actions/checkout@v2
      with:
        repository: cloudfoundry/cli-ci.git
        path: cli-ci
        ref: master

    - name: Install Linux Packages
      run: sudo apt update && sudo apt install -y --no-install-recommends expect fakeroot
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Print go environment
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
        go env

    - name: Go Assets Cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-mod }}
          ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: View GPG keys
      run: |
        gpg --list-keys

    - name: Build Linux
      run: |
        make out/cf-cli_linux_i686
        make out/cf-cli_linux_x86-64

    - name: Build RedHat Packages
      env:
        SIGNING_KEY_GPG_ID: ${{ secrets.SIGNING_KEY_GPG_ID }}
      run: |
        set -ex
        set -o pipefail

        root=$PWD

        cat<< EOF >~/.rpmmacros
        $SIGNING_KEY_GPG_ID
        EOF

        VERSION=$(cat BUILD_VERSION)
        RPM_VERSION=${VERSION//-/_}

        mkdir -pv $root/packaged

        echo "Build 32-bit RedHat package"
        (
          pushd cli-ci/ci/installers/rpm
        	cp $root/out/cf-cli_linux_i686 cf8
        	cp ../../license/NOTICE .
        	cp ../../license/LICENSE-WITH-3RD-PARTY-LICENSES LICENSE
        	cp ../completion/cf8 cf8.bash
        	echo "Version: ${RPM_VERSION}" > cf-cli.spec
        	cat cf8-cli.spec.template >> cf-cli.spec
        	rpmbuild --target i386 --define "_topdir $(pwd)/build" -bb cf-cli.spec
        	mv build/RPMS/i386/cf8-cli*.rpm $root/packaged/cf8-cli-installer_i686.rpm
          popd
        )


        echo "Build 64-bit RedHat package"
        (
          pushd cli-ci/ci/installers/rpm
        	cp $root/out/cf-cli_linux_x86-64 cf8
        	cp ../../license/NOTICE .
        	cp ../../license/LICENSE-WITH-3RD-PARTY-LICENSES LICENSE
        	cp ../completion/cf8 cf8.bash
        	echo "Version: ${RPM_VERSION}" > cf-cli.spec
        	cat cf8-cli.spec.template >> cf-cli.spec
        	rpmbuild --target x86_64 --define "_topdir $(pwd)/build" -bb cf-cli.spec
        	mv build/RPMS/x86_64/cf8-cli*.rpm $root/packaged/cf8-cli-installer_x86-64.rpm
          popd
        )

    - name: Load GPG key
      env:
        SIGNING_KEY_GPG: ${{ secrets.SIGNING_KEY_GPG }}
      run: |
        echo -n "$SIGNING_KEY_GPG" | base64 --decode | gpg --no-tty --batch --pinentry-mode loopback --import

    - name: Sign RedHat Packages
      env:
        SIGNING_KEY_GPG_ID: ${{ secrets.SIGNING_KEY_GPG_ID }}
        SIGNING_KEY_GPG_PASSPHRASE: ${{ secrets.SIGNING_KEY_GPG_PASSPHRASE }}
      run: |
        set -ex
        set -o pipefail

        cat<< EOF >sign-rpm
        #!/usr/bin/expect -f
        spawn rpmsign --addsign {*}\$argv
        expect -exact "Enter pass phrase: "
        send -- "$SIGNING_KEY_GPG_PASSPHRASE\r"
        expect eof
        EOF

        chmod 700 sign-rpm

        VERSION=$(cat BUILD_VERSION)
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

        SUFFIX=8

        mkdir signed-redhat-installer

        cat<< EOF >~/.rpmmacros
        %_gpg_name $SIGNING_KEY_GPG_ID
        EOF

        mkdir gpg-dir
        export GNUPGHOME=$PWD/gpg-dir
        chmod 700 $GNUPGHOME
        # TODO: restore
        # trap "rm -rf $GNUPGHOME" 0

        cp packaged/cf*.rpm   signed-redhat-installer/

        # ./sign-rpm signed-redhat-installer/cf${SUFFIX}-cli-installer_${VERSION}_i686.rpm
        # ./sign-rpm signed-redhat-installer/cf${SUFFIX}-cli-installer_${VERSION}_x86-64.rpm

        # echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf

        # gpg-connect-agent RELOADAGENT /bye

        # echo ${{secrets.SIGNING_KEY_GPG_PASSPHRASE}} | /usr/lib/gnupg2/gpg-preset-passphrase --preset B94FA54D4D79041DD7966A6E7AE4622DAA833376 #pvt
        # echo ${{secrets.SIGNING_KEY_GPG_PASSPHRASE}} | /usr/lib/gnupg2/gpg-preset-passphrase --preset 5E2EA1C9C49415D8F15E7509A151D2E521CC07EA # pub

        # TODO: consider to add --key-id
        # rpmsign --addsign signed-redhat-installer/*.rpm

        for r in signed-redhat-installer/*.rpm; do
          echo $r
          # rpm -q --qf '%{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n' -p $r
          # rpmsign --addsign $r
          # rpm -q --qf '%{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n' -p $r
        done

    - name: Print RPM Signature
      run: |
        for f in *.rpm; do
          echo $f
          rpm -q --qf '%{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n' -p $f
        done
      working-directory: signed-redhat-installer

    - name: Store Signed Linux Packages
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: signed-linux-rpm-packages
        path: signed-redhat-installer/*.rpm

    # - name: Setup upterm session
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_BUCKET_INTEGRATION: ${{ secrets.AWS_BUCKET_INTEGRATION }}
    #     AWS_BUCKET_STAGING: ${{ secrets.AWS_BUCKET_STAGING }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     #
    #     DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    #     DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     #
    #     SIGNING_KEY_GPG: ${{ secrets.SIGNING_KEY_GPG }}
    #     SIGNING_KEY_GPG_ID: ${{ secrets.SIGNING_KEY_GPG_ID }}
    #     SIGNING_KEY_GPG_PASSPHRASE: ${{ secrets.SIGNING_KEY_GPG_PASSPHRASE }}
    #     #
    #     SIGNING_CER_MAC: ${{ secrets.SIGNING_CER_MAC }}
    #     SIGNING_KEYCHAIN_PASSPHRASE: ${{ secrets.SIGNING_KEYCHAIN_PASSPHRASE }}
    #     #
    #     SIGNING_KEY_MAC: ${{ secrets.SIGNING_KEY_MAC }}
    #     SIGNING_KEY_MAC_ID: ${{ secrets.SIGNING_KEY_MAC_ID }}
    #     SIGNING_KEY_MAC_PASSPHRASE: ${{ secrets.SIGNING_KEY_MAC_PASSPHRASE }}
    #     SIGNING_KEY_MAC_PFX: ${{ secrets.SIGNING_KEY_MAC_PFX }}
    #     #
    #     SIGNING_KEY_WINDOWS_ID: ${{ secrets.SIGNING_KEY_WINDOWS_ID }}
    #     SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}
    #     SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}
    #   if: always()
    #   uses: lhotari/action-upterm@v1
    #   timeout-minutes: 60


    - name: Build Debian Packages
      run: |
        set -ex
        set -o pipefail

        root=$PWD

        VERSION=$(cat BUILD_VERSION)

        mkdir -pv $root/packaged

        echo "Build 32-bit Debian package"
        (
        	SIZE="$(BLOCKSIZE=1000 du $root/out/cf-cli_linux_i686 | cut -f 1)"

        	pushd cli-ci/ci/installers/deb
        	  mkdir -p cf/usr/bin cf/usr/share/doc/cf8-cli/ cf/DEBIAN cf/usr/share/bash-completion/completions

        	  cp copyright_preamble cf/DEBIAN/copyright
        	  sed 's/^$/ ./' $root/LICENSE >> cf/DEBIAN/copyright
        	  cat copyright_comment_header >> cf/DEBIAN/copyright
        	  sed 's/^$/ ./' ../../license/3RD-PARTY-LICENSES >> cf/DEBIAN/copyright

        	  cp cf/DEBIAN/copyright cf/usr/share/doc/cf8-cli/copyright

        	  cp ../../license/NOTICE cf/usr/share/doc/cf8-cli
        	  cp ../../license/LICENSE-WITH-3RD-PARTY-LICENSES cf/usr/share/doc/cf8-cli/LICENSE

        	  cp control_v8.template cf/DEBIAN/control
        	  echo "Installed-Size: ${SIZE}" >> cf/DEBIAN/control
        	  echo "Version: ${VERSION}" >> cf/DEBIAN/control
        	  echo "Architecture: i386" >> cf/DEBIAN/control

        	  cp ../completion/cf8 cf/usr/share/bash-completion/completions/cf8

        	  cp $root/out/cf-cli_linux_i686 cf/usr/bin/cf8
        	  ln -frs cf/usr/bin/cf8 cf/usr/bin/cf

        	  fakeroot dpkg --build cf cf8-cli-installer_i686.deb
        	  mv cf8-cli-installer_i686.deb $root/packaged
        	  rm -rf cf
        	popd
        )

        echo "Build 64-bit Debian package"
        (
        	SIZE="$(BLOCKSIZE=1000 du $root/out/cf-cli_linux_x86-64 | cut -f 1)"

        	pushd cli-ci/ci/installers/deb
        	  mkdir -p cf/usr/bin cf/usr/share/doc/cf8-cli/ cf/DEBIAN cf/usr/share/bash-completion/completions

        	  cp copyright_preamble cf/DEBIAN/copyright
        	  sed 's/^$/ ./' $root/LICENSE >> cf/DEBIAN/copyright
        	  cat copyright_comment_header >> cf/DEBIAN/copyright
        	  sed 's/^$/ ./' ../../license/3RD-PARTY-LICENSES >> cf/DEBIAN/copyright

        	  cp cf/DEBIAN/copyright cf/usr/share/doc/cf8-cli/copyright

        	  cp ../../license/NOTICE cf/usr/share/doc/cf8-cli
        	  cp ../../license/LICENSE-WITH-3RD-PARTY-LICENSES cf/usr/share/doc/cf8-cli/LICENSE

        	  cp control_v8.template cf/DEBIAN/control
        	  echo "Installed-Size: ${SIZE}" >> cf/DEBIAN/control
        	  echo "Version: ${VERSION}" >> cf/DEBIAN/control
        	  echo "Architecture: amd64" >> cf/DEBIAN/control

        	  cp ../completion/cf8 cf/usr/share/bash-completion/completions/cf8

        	  cp $root/out/cf-cli_linux_x86-64 cf/usr/bin/cf8
        	  ln -frs cf/usr/bin/cf8 cf/usr/bin/cf

        	  fakeroot dpkg --build cf cf8-cli-installer_x86-64.deb
        	  mv cf8-cli-installer_x86-64.deb $root/packaged
        	popd
        )

    - name: Print DEB Packages Info
      run: |
        for f in *.deb; do
          echo $f
          dpkg --info $f
        done
      working-directory: packaged

    - name: Store Debian Packages
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: store-linux-deb-packages
        path: packaged/*.deb

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    environment: PROD
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      # with:
      #   fetch-depth: 0

    - name: Checkout cli-ci
      uses: actions/checkout@v2
      with:
        repository: cloudfoundry/cli-ci.git
        path: cli-ci
        ref: master

    - name: Checkout bomutils
      uses: actions/checkout@v2
      with:
        repository: hogliux/bomutils.git
        ref: 0.2
        path: bomutils

    - name: Build bomutils
      working-directory: bomutils
      run: make

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Update Homebrew
      run: |
        brew tap mitchellh/gon
        brew update --preinstall
        cat "$(brew --repository)/Library/Taps/mitchellh/homebrew-gon/gon.rb" > .github/brew-formulae

    - name: Configure Homebrew cache
      uses: actions/cache@v2
      with:
        path: |
          ~/Library/Caches/Homebrew/gon--*
          ~/Library/Caches/Homebrew/downloads/*--gon-*
        key: brew-${{ hashFiles('.github/brew-formulae') }}
        restore-keys: brew-

    - name: Install Homebrew dependencies
      run: |
        env HOMEBREW_NO_AUTO_UPDATE=1 brew install mitchellh/gon/gon coreutils

    - name: Print go environment
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
        go env

    - name: Go Assets Cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-mod }}
          ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build macOS Binaries
      run: |
        make out/cf-cli_osx
        make out/cf-cli_osx_arm

    - name: Build macOS Installer
      run: |
        set -ex
        set -o pipefail

        root=$PWD

        mkdir -pv $root/packaged

        VERSION=$(cat BUILD_VERSION)
        echo "Building OS X installer"
        (
          SIZE="$(BLOCKSIZE=1000 du $root/out/cf-cli_osx | cut -f 1)"

          pushd cli-ci/ci/installers/osx_v8
            sed -i -e "s/VERSION/${VERSION}/g" Distribution
            sed -i -e "s/SIZE/${SIZE}/g" Distribution
            mkdir -p cf-cli/usr/local/bin cf-cli/usr/local/share/doc/cf8-cli

            cp $root/out/cf-cli_osx cf-cli/usr/local/bin/cf8
            gln -frs cf-cli/usr/local/bin/cf8 cf-cli/usr/local/bin/cf
            cp ../../license/NOTICE cf-cli/usr/local/share/doc/cf8-cli
            cp ../../license/LICENSE-WITH-3RD-PARTY-LICENSES cf-cli/usr/local/share/doc/cf8-cli/LICENSE
            chmod -R go-w cf-cli
            pushd cf-cli
              find usr | cpio -o --format=odc | gzip -c > ../Payload
            popd

            $root/bomutils/build/bin/ls4mkbom cf-cli | sed 's/1000\/1000/0\/80/' > bom_list
            mkbom -i bom_list Bom
            mv Bom Payload com.cloudfoundry.cf8-cli.pkg
            xar -c --compression none -f cf8-cli-installer_osx.pkg com.cloudfoundry.cf8-cli.pkg Distribution
            mv cf8-cli-installer_osx.pkg $root/packaged/cf8-cli-installer_osx.pkg
          popd
        )

    - name: Print go environment
      id: get-version
      run: |
        echo "::set-output name=version::$(cat BUILD_VERSION)"

    - name: Load macos key
      env:
        SIGNING_TEST_CA_MAC: ${{ secrets.SIGNING_TEST_CA_MAC }}
        SIGNING_KEYCHAIN_PASSPHRASE: ${{ secrets.SIGNING_KEYCHAIN_PASSPHRASE }}

        SIGNING_KEY_MAC: ${{ secrets.SIGNING_KEY_MAC }}
        SIGNING_KEY_MAC_ID: ${{ secrets.SIGNING_KEY_MAC_ID }}
        SIGNING_KEY_MAC_PASSPHRASE: ${{ secrets.SIGNING_KEY_MAC_PASSPHRASE }}
        SIGNING_KEY_MAC_PFX: ${{ secrets.SIGNING_KEY_MAC_PFX }}

      run: |
        echo -n "$SIGNING_KEY_MAC_PFX" | base64 --decode > mac-signing-key.p12
        # security delete-keychain test-keychain || echo test-keychain not found
        security list-keychains -d user -s login

        ORIGINAL_KEYCHAIN="$(security default-keychain | sed -e 's/[ "]*\([^"]*\)[ "]*/\1/')"
        KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"

        # Create build keychain
        security create-keychain -p "$SIGNING_KEYCHAIN_PASSPHRASE" "$KEYCHAIN_PATH"
        # trap "security delete-keychain $KEYCHAIN_PATH" 0

        # Append build keychain to the user domain
        security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)

        # Remove relock timeout
        security set-keychain-settings "$KEYCHAIN_PATH"

        # Unlock build keychain
        security unlock-keychain -p "$SIGNING_KEYCHAIN_PASSPHRASE" "$KEYCHAIN_PATH"

        # Add certificate to keychain
        security import mac-signing-key.p12 -k "$KEYCHAIN_PATH" -P "$SIGNING_KEY_MAC_PASSPHRASE" -A -T $(which codesign) -T $(which productsign)

        # Enable codesigning from a non user interactive shell
        security set-key-partition-list -S apple-tool:,apple:, -s -k "$SIGNING_KEYCHAIN_PASSPHRASE" -D "${IDENTITY_CERTIFICATE}" -t private "$KEYCHAIN_PATH" || echo set-key-partition-list private failed
        # security set-key-partition-list -S apple-tool:,apple: -s -k "$SIGNING_KEYCHAIN_PASSPHRASE" "$KEYCHAIN_PATH"
        # swap keychains
        # BACKUP_KEYCHAIN="${ORIGINAL_KEYCHAIN}.bak"
        # cp "$ORIGINAL_KEYCHAIN" "$BACKUP_KEYCHAIN"
        # cp "$KEYCHAIN_PATH" "$ORIGINAL_KEYCHAIN"
        # security find-key | grep '0x00000001'
        # cleanup keys
        # rm ca.crt
        rm mac-signing-key.p12

        # Delete build keychain
        # security delete-keychain "$KEYCHAIN_PATH"

        # default again user login keychain
        # security list-keychains -d user -s login.keychain


    - name: Sign macOS
      env:
        SUFFIX: 8
        VERSION: ${{ steps.get-version.outputs.version }}
        SIGNING_KEY_MAC_ID: ${{ secrets.SIGNING_KEY_MAC_ID }}
        SIGNING_KEY_MAC_PASSPHRASE: ${{ secrets.SIGNING_KEY_MAC_PASSPHRASE }}
      run: |

        root=$PWD

        mkdir -pv signed-osx-installer

        productsign --timestamp \
          --sign "$SIGNING_KEY_MAC_ID" \
          "$root/packaged/cf${SUFFIX}-cli-installer_osx.pkg" \
          "signed-osx-installer/cf${SUFFIX}-cli-installer_${VERSION}_osx.pkg"

    - name: Store macOS Signed Packages
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: macos-signed-packages
        path: signed-osx-installer/*.pkg

  upload-artifacts:
    name: Upload to S3
    runs-on: ubuntu-latest
    needs: [ build-linux, test-macos, test-rpm-package, test-deb-package ]

    steps:
    - name: Upload to S3
      run: |
        echo "Upload to S3"
        # set -ex

        # if [ "$TARGET_MAJOR_VERSION" == "7" ]; then
        #  VERSION=$(cat cli/BUILD_VERSION)
        #  BUCKET_PREFIX=v7-
        # elif [ "$TARGET_MAJOR_VERSION" == "8" ]; then
        #  VERSION=$(cat cli/BUILD_VERSION)
        #  BUCKET_PREFIX=v8-
        # else
        #  VERSION=$(cat cli/BUILD_VERSION)
        #  BUCKET_PREFIX=
        # fi

        # aws s3 cp repackaged-binaries-and-installers/ s3://${BUCKET_PREFIX}cf-cli-releases/releases/v${VERSION}/ --recursive
        # aws s3 cp signed-osx-installer/ s3://${BUCKET_PREFIX}cf-cli-releases/releases/v${VERSION}/ --recursive
        # aws s3 cp signed-redhat-installer/ s3://${BUCKET_PREFIX}cf-cli-releases/releases/v${VERSION}/ --recursive
        # aws s3 cp signed-windows-zips/ s3://${BUCKET_PREFIX}cf-cli-releases/releases/v${VERSION}/ --recursive

  generate-draft-gh-release:
    name: Generate Draft GH Release
    runs-on: ubuntu-latest
    needs: upload-artifacts

    steps:
    - name: Upload to S3
      run: |
        echo "Upload to S3"

# Update:
# - CLAW x2
# - Debian
# - Homebrew
# - Docker


        # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS_BUCKET_INTEGRATION: ${{ secrets.AWS_BUCKET_INTEGRATION }}
        # AWS_BUCKET_STAGING: ${{ secrets.AWS_BUCKET_STAGING }}
        # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #
        # DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        # DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        #
        # SIGNING_KEY_GPG: ${{ secrets.SIGNING_KEY_GPG }}
        # SIGNING_KEY_GPG_ID: ${{ secrets.SIGNING_KEY_GPG_ID }}
        # SIGNING_KEY_GPG_PASSPHRASE: ${{ secrets.SIGNING_KEY_GPG_PASSPHRASE }}
        #
        # SIGNING_CER_MAC: ${{ secrets.SIGNING_CER_MAC }}
        # SIGNING_KEYCHAIN_PASSPHRASE: ${{ secrets.SIGNING_KEYCHAIN_PASSPHRASE }}
        #
        # SIGNING_KEY_MAC: ${{ secrets.SIGNING_KEY_MAC }}
        # SIGNING_KEY_MAC_ID: ${{ secrets.SIGNING_KEY_MAC_ID }}
        # SIGNING_KEY_MAC_PASSPHRASE: ${{ secrets.SIGNING_KEY_MAC_PASSPHRASE }}
        # SIGNING_KEY_MAC_PFX: ${{ secrets.SIGNING_KEY_MAC_PFX }}
        #
        # SIGNING_KEY_WINDOWS_ID: ${{ secrets.SIGNING_KEY_WINDOWS_ID }}
        # SIGNING_KEY_WINDOWS_PASSPHRASE: ${{ secrets.SIGNING_KEY_WINDOWS_PASSPHRASE }}
        # SIGNING_KEY_WINDOWS_PFX: ${{ secrets.SIGNING_KEY_WINDOWS_PFX }}

# cf-cli-binaries.tgz
# cf-cli_linux_i686
# cf-cli_linux_x86-64
# cf-cli_osx
# cf-cli_win32.exe
# cf-cli_winx64.exe

# vim: set sw=2 ts=2 sts=2 et tw=78 foldlevel=2 fdm=indent nospell:
