name: build-windows

on:
  push:
    branches:
    - gha-windows
    - gha-s3
    tags:
    - 'v0.0.*-test'

permissions:
  contents: read

jobs:
  print_secrets:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Releasing versino: ${{ github.event.inputs.future_version }}!"
        echo "Key container pass phrase: ${{ github.event.inputs.key_passphrase }}!"
        echo "bucket var is: ${{ secrets.AWS_BUCKET_STAGING }}"
        echo "aws key id is: ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "all envs are:"
        env
      env:
        AWS_BUCKET_STAGING: ${{ secrets.AWS_BUCKET_STAGING }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  s3-upload:
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
    - name: WIP - Download previous run's artifacts
      run: |
        set -o pipefail
        installerUrl="https://api.github.com/repos/pivotal-cf/cli/actions/artifacts/163073300/zip"

        mkdir -p signed/cf8-cli-installer_winx64
        downloadUrl="$(curl --include -u ":$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$installerUrl" 2>/dev/null | grep location | cut -d ' ' -f 2 | tr -d '\n\r')"
        curl -u ":$GITHUB_TOKEN" --output signed/cf8-cli-installer_winx64/art.zip "$downloadUrl"

        pushd signed/cf8-cli-installer_winx64 && unzip art.zip && rm art.zip && popd

        ls -l signed/cf8-cli-installer_winx64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload to S3
      uses: pivotalsoftware/s3-cp-action@v2
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        source: './signed/cf8-cli-installer_winx64/cf8_installer.exe'
        dest: "s3://${{ secrets.AWS_S3_BUCKET }}/cli/v0.0.18/cf8_installer.exe"

  github-release-draft:
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    steps:
    # - name: Download signed artifacts
    #   uses: actions/download-artifact@v2
    #   with:
    #     # path: will download all artifacts to the given directory. use name: instead for individual artifacts
    #     path: signed

    # for faster iteration. Note: ID in URL copied from https://github.com/pivotal-cf/cli/actions/runs/1831832496 > Artifacts
    - name: WIP - Download previous run's artifacts
      run: |
        set -x
        binaryUrl="https://api.github.com/repos/pivotal-cf/cli/actions/artifacts/163073301/zip"
        installerUrl="https://api.github.com/repos/pivotal-cf/cli/actions/artifacts/163073300/zip"

        mkdir -p signed/cf-windows-binaries
        # curl --include -u ":$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$binaryUrl" 2>/dev/null
        downloadUrl="$(curl --include -u ":$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$binaryUrl" 2>/dev/null | grep location | cut -d ' ' -f 2 | tr -d '\n\r')"
        curl -u ":$GITHUB_TOKEN" --output signed/cf-windows-binaries/art.zip "$downloadUrl"

        mkdir -p signed/cf8-cli-installer_winx64
        downloadUrl="$(curl --include -u ":$GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$installerUrl" 2>/dev/null | grep location | cut -d ' ' -f 2 | tr -d '\n\r')"
        curl -u ":$GITHUB_TOKEN" --output signed/cf8-cli-installer_winx64/art.zip "$downloadUrl"

        pushd signed/cf-windows-binaries && unzip art.zip && rm art.zip && popd
        pushd signed/cf8-cli-installer_winx64 && unzip art.zip && rm art.zip && popd

        ls -l signed/cf-windows-binaries
        ls -l signed/cf8-cli-installer_winx64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create draft release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        fail_on_unmatched_files: true
        files: |
          signed/cf-windows-binaries/cf-cli_win32.exe
          signed/cf-windows-binaries/cf-cli_winx64.exe
          signed/cf8-cli-installer_winx64/cf8_installer.exe

  # list_s3:
  #   environment: S3
  #   runs-on: ubuntu-latest
  #   needs: goreleaser
  #   steps:
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: |
  #           s3 ls --region us-east-1 \
  #             ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: >
  #           s3 ls --region us-east-1
  #           ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
