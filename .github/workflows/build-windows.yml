name: build-windows

on:
  push:
    branches:
    - gha-windows
    - gha-s3
    tags:
    - 'v0.0.*-test'
    - 'v8.100.*-test'

permissions:
  contents: read

jobs:
  print_secrets:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Releasing versino: ${{ github.event.inputs.future_version }}!"
        echo "Key container pass phrase: ${{ github.event.inputs.key_passphrase }}!"
        echo "bucket var is: ${{ secrets.AWS_BUCKET_STAGING }}"
        echo "aws key id is: ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "all envs are:"
        env
      env:
        AWS_BUCKET_STAGING: ${{ secrets.AWS_BUCKET_STAGING }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  s3-upload:
    environment: DEV
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
    - name: WIP - Download previous run's artifacts
      uses: pivotalsoftware/action-download-artifact@v2
      with:
        workflow: build-windows.yml
        run_number: 51
        path: signed
    - name: debug
      run: ls signed

    - name: name windows edge artifact
      if: ${{ github.ref_type != 'tag' }}
      # set environment vars for subsequent steps. see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      run: |
        echo "INSTALLER_RELEASE_VERSION=edge" >> $GITHUB_ENV
        echo "INSTALLER_ZIP_FILENAME=cf8-cli-installer_edge_winx64.zip" >> $GITHUB_ENV
        # echo "BINARY_ZIP_FILENAME: " >> ENV

    - name: name windows release artifact
      if: ${{ github.ref_type == 'tag' }}
      # set environment vars for subsequent steps. see: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      run: |
        # strip leading v to go from tag -> semver
        INSTALLER_RELEASE_VERSION=$(echo ${{ github.ref_name }} | tr -d v)
        echo "INSTALLER_RELEASE_VERSION=${INSTALLER_RELEASE_VERSION}" >> $GITHUB_ENV
        echo "INSTALLER_ZIP_FILENAME=cf8-cli-installer_${INSTALLER_RELEASE_VERSION}_winx64.zip" >> $GITHUB_ENV
        cat $GITHUB_ENV

    - name: zip windows artifact
      run: |
        pushd signed/cf8-cli-installer_winx64
          zip "$INSTALLER_ZIP_FILENAME" *
          ls
        popd

    - name: Upload installer to CLAW S3 bucket
      if: ${{ github.ref_type == 'tag' }}
      # forked for security considerations
      uses: pivotalsoftware/s3-cp-action@v2
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        source: "./signed/cf8-cli-installer_winx64/${{ env.INSTALLER_ZIP_FILENAME }}"
        dest: "s3://${{ secrets.AWS_S3_BUCKET }}/v8-cf-cli-releases/releases/v${{ env.INSTALLER_RELEASE_VERSION }}/${{ env.INSTALLER_ZIP_FILENAME }}"

    - name: Instruct human to update CLAW
      run: |
        echo "Please go to https://github.com/cloudfoundry/CLAW/blob/develop/claw-variables.yml and add the following line to the file:"
        echo
        echo "- ${INSTALLER_RELEASE_VERSION}"

  github-release-draft:
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
    # - name: Download signed artifacts
    #   uses: actions/download-artifact@v2
    #   with:
    #     # path: will download all artifacts to the given directory. use name: instead for individual artifacts
    #     path: signed

    # for faster iteration
    - name: WIP - Download previous run's artifacts
      uses: pivotalsoftware/action-download-artifact@v2
      with:
        workflow: build-windows.yml
        run_number: 51
        path: signed
    - name: debug
      run: ls signed

    - name: Create draft release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        fail_on_unmatched_files: true
        files: |
          signed/cf-windows-binaries/cf-cli_win32.exe
          signed/cf-windows-binaries/cf-cli_winx64.exe
          signed/cf8-cli-installer_winx64/cf8_installer.exe

  # list_s3:
  #   environment: S3
  #   runs-on: ubuntu-latest
  #   needs: goreleaser
  #   steps:
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: |
  #           s3 ls --region us-east-1 \
  #             ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - uses: docker://amazon/aws-cli:latest
  #       with:
  #         args: >
  #           s3 ls --region us-east-1
  #           ci-cli-assets-dev
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
